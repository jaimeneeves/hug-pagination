!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.HugPaginationJS=e():t.HugPaginationJS=e()}(self,(function(){return(()=>{"use strict";var t={d:(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.d(e,{default:()=>i});const i=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options={};var i={trigger:{selector:null},type:"default",totalItems:0,totalPages:0,currentPage:1,pageSize:10,maxPages:10,data:[]};if(!e)throw new Error("Missing input argument");i.totalItems=e,"object"===o(n)?this.options=Object.assign({},i,n):this.options=i}var e,i;return e=t,(i=[{key:"init",value:function(){var t=this.options.data.length>0?this.options.data.length:this.options.totalItems;if(0===t)throw new Error("There is no data");return this.resolvePagination(t)}},{key:"resolvePagination",value:function(t){var e=Math.ceil(t/this.options.pageSize);this.options.totalPages=e,this.options.currentPage<1?this.options.currentPage=1:this.options.currentPage>e&&(this.options.currentPage=e);var o=0,n=0;if(e<=this.options.maxPages)o=1,n=e;else{var i=Math.floor(this.options.maxPages/2),r=Math.ceil(this.options.maxPages/2)-1;this.options.currentPage<=i?(o=1,n=this.options.maxPages):this.options.currentPage+r>=e?(o=e-this.options.maxPages+1,n=e):(o=this.options.currentPage-i,n=this.options.currentPage+r)}var a=(this.options.currentPage-1)*this.options.pageSize,s=Math.min(a+this.options.pageSize-1,t-1),p=Array.from(Array(n+1-o).keys()).map((function(t){return o+t}));return{totalItems:t,currentPage:this.options.currentPage,pageSize:this.options.pageSize,data:this.options.data,trigger:this.options.trigger,totalPages:e,startPage:o,endPage:n,startIndex:a,endIndex:s,pages:p}}},{key:"getTrigger",value:function(){return this.options.trigger}},{key:"getPagination",value:function(){return this.options}}])&&n(e.prototype,i),t}();return e.default})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,